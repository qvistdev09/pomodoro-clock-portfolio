{"version":3,"sources":["App.js","serviceWorker.js","index.js","sounds/chime.wav"],"names":["App","props","activeSession","pomodoring","intervalFunc","chime","Audio","chimeObject","state","goingToBreak","breakLength","sessionLength","currentMinutes","currentSeconds","changeLength","bind","pomodoroStart","pomodoroStop","pomodoroReset","this","document","getElementById","pause","currentTime","clearInterval","setState","setInterval","play","value","property","className","style","gridArea","id","onClick","src","href","target","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.e865f332.chunk.js","sourcesContent":["import React from 'react';\nimport chime from './sounds/chime.wav';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.activeSession = false;\n    this.pomodoring = false;\n    this.intervalFunc = null;\n    this.chime = new Audio(chime);\n    this.chimeObject = null;\n    this.state = {\n      goingToBreak: true,\n      breakLength: 5,\n      sessionLength: 25,\n      currentMinutes: 0,\n      currentSeconds: 0,\n    };\n    this.changeLength = this.changeLength.bind(this);\n    this.pomodoroStart = this.pomodoroStart.bind(this);\n    this.pomodoroStop = this.pomodoroStop.bind(this);\n    this.pomodoroReset = this.pomodoroReset.bind(this);\n  }\n\n  componentDidMount() {\n    this.chimeObject = document.getElementById('beep');\n  }\n\n  pomodoroReset() {\n    this.chimeObject.pause();\n    this.chimeObject.currentTime = 0;\n    this.activeSession = false;\n    this.pomodoring = false;\n    clearInterval(this.intervalFunc);\n    this.setState({\n      goingToBreak: true,\n      breakLength: 5,\n      sessionLength: 25,\n      currentMinutes: 0,\n      currentSeconds: 0,\n    });\n  }\n\n  pomodoroStop() {\n    this.pomodoring = false;\n    clearInterval(this.intervalFunc);\n  }\n\n  pomodoroStart() {\n    if (this.pomodoring) {\n      this.pomodoroStop();\n      return;\n    }\n\n    this.pomodoring = true;\n\n    if (this.activeSession === false) {\n      this.setState((state) => ({\n        currentMinutes: state.sessionLength,\n        currentSeconds: 0,\n      }));\n\n      this.activeSession = true;\n    }\n\n    // eslint-disable-next-line\n    this.intervalFunc = setInterval(() => {\n      this.setState((state) => ({\n        currentSeconds: state.currentSeconds - 1,\n      }));\n      if (this.state.currentMinutes === 0 && this.state.currentSeconds < 0) {\n        this.chimeObject.play();\n        if (this.state.goingToBreak) {\n          this.setState((state) => ({\n            currentMinutes: state.breakLength,\n            currentSeconds: 0,\n            goingToBreak: false,\n          }));\n        } else {\n          this.setState((state) => ({\n            currentMinutes: state.sessionLength,\n            currentSeconds: 0,\n            goingToBreak: true,\n          }));\n        }\n      } else if (this.state.currentSeconds < 0) {\n        this.setState((state) => ({\n          currentSeconds: 59,\n          currentMinutes: state.currentMinutes - 1,\n        }));\n      }\n    }, 1000);\n  }\n\n  changeLength(value, property) {\n    if (this.pomodoring) {\n      return;\n    }\n    this.activeSession = false;\n    if (this.state[property] === 1 && value === -1) {\n      return;\n    }\n    if (this.state[property] === 60 && value === 1) {\n      return;\n    }\n    this.setState((state) => ({\n      [property]: state[property] + value,\n      goingToBreak: true,\n    }));\n  }\n\n  render() {\n    return (\n      <div\n        className={this.state.goingToBreak ? 'container' : 'container chill'}\n      >\n        <div className=\"grid-item m-small d-col\" style={{ gridArea: 'title' }}>\n          <h1>\n            PO<span className=\"crazy1\">M</span>O\n            <span className=\"crazy2\">D</span>ORO CLOCK\n          </h1>\n          <hr />\n        </div>\n        <div className=\"grid-item-grid m-small\" style={{ gridArea: 'break' }}>\n          <div className=\"grid-item align-end\">\n            <p id=\"break-label\">Break Length</p>\n          </div>\n          <div className=\"grid-item\">\n            <i\n              className=\"fas fa-chevron-circle-left clickable\"\n              onClick={() => this.changeLength(-1, 'breakLength')}\n              id=\"break-decrement\"\n            ></i>\n            <p className=\"length-nr\" id=\"break-length\">\n              {this.state.breakLength}\n            </p>\n            <i\n              className=\"fas fa-chevron-circle-right clickable\"\n              onClick={() => this.changeLength(1, 'breakLength')}\n              id=\"break-increment\"\n            ></i>\n          </div>\n        </div>\n        <div className=\"grid-item-grid m-small\" style={{ gridArea: 'session' }}>\n          <div className=\"grid-item align-end\">\n            <p id=\"session-label\">Session Length</p>\n          </div>\n          <div className=\"grid-item\">\n            <i\n              className=\"fas fa-chevron-circle-left clickable\"\n              onClick={() => this.changeLength(-1, 'sessionLength')}\n              id=\"session-decrement\"\n            ></i>\n            <p className=\"length-nr\" id=\"session-length\">\n              {this.state.sessionLength}\n            </p>\n            <i\n              className=\"fas fa-chevron-circle-right clickable\"\n              onClick={() => this.changeLength(1, 'sessionLength')}\n              id=\"session-increment\"\n            ></i>\n          </div>\n        </div>\n        <div className=\"grid-item-grid m-small\" style={{ gridArea: 'timer' }}>\n          <div className=\"grid-item align-end\" id=\"timer-label\">\n            {this.state.goingToBreak ? 'Session' : 'Break'}\n          </div>\n          <div className=\"grid-item\">\n            <p className=\"timer\" id=\"time-left\">\n              {this.pomodoring && this.state.currentMinutes > 9\n                ? this.state.currentMinutes + ':'\n                : this.pomodoring && this.state.currentMinutes < 10\n                ? '0' + this.state.currentMinutes + ':'\n                : !this.pomodoring && this.state.sessionLength < 10\n                ? '0' + this.state.sessionLength + ':'\n                : this.state.sessionLength + ':'}\n              {!this.pomodoring\n                ? '00'\n                : this.state.currentSeconds < 10\n                ? '0' + this.state.currentSeconds\n                : this.state.currentSeconds}\n            </p>\n          </div>\n          <audio src={this.chime.src} id=\"beep\" />\n        </div>\n        <div className=\"grid-item m-small\" style={{ gridArea: 'controls' }}>\n          <i\n            id=\"start_stop\"\n            className=\"fas fa-play clickable\"\n            onClick={this.pomodoroStart}\n          ></i>\n          <i className=\"fas fa-pause clickable\" onClick={this.pomodoroStop}></i>\n          <i\n            id=\"reset\"\n            className=\"fas fa-redo-alt clickable\"\n            onClick={this.pomodoroReset}\n          ></i>\n        </div>\n        <div className=\"grid-item m-small d-col\" style={{ gridArea: 'cred' }}>\n          <p className=\"cred\">\n            by{' '}\n            <a\n              href=\"https://github.com/qvistdev09\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              qvistdev09\n            </a>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <i className=\"fas fa-seedling decoleaf\"></i>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/chime.0140343c.wav\";"],"sourceRoot":""}